/*проверить пример алфавита, отношения, область опр, ролевое элемент' в утв и опр*/

concept_state_machine
=> nrel_main_idtf: [конечный автомат] (*<- lang_ru;;*);
=> nrel_main_idtf: [finite-state machine] (*<- lang_en;;*);
=> nrel_idtf: [state machine] (*<- lang_en;;*);
=> nrel_idtf: [машина состояний] (*<- lang_ru;;*);;

definition -> ...
(*
    => nrel_idtf: [Опр. Конечный автомат] (*<- lang_ru;;*);;
    => nrel_using_constants: ...
    (*
        <- sc_node_not_binary_tuple;;
        -> nrel_finite_set_of_statements;;
        -> nrel_finite_input_alphabet;;
        -> nrel_finite_output_alphabet;;
        -> nrel_output_functions;;
        -> nrel_transition_functions;;
    *);;
    -> rrel_key_sc_element: concept_state_machine;;
    <= nrel_sc_text_translation: ...
    (*
        -> rrel_example: [Конечный автомат- математическая абстракция, модель
          дискретного устройства, имеющего один вход, один выход и в каждый момент
          времени находящегося в одном состоянии из конечного множества возможных.] (*<- lang_ru;;*);;
    *);;
*);;

statement -> ...
(*
	=> nrel_idtf: [Утв.1 О конечном автомате.] (*<- lang_ru;;*);;
	=> nrel_using_constants: ...
        (*
			<- sc_node_not_binary_tuple;;
            -> nrel_finite_set_of_statements;;
            -> nrel_finite_input_alphabet;;
            -> nrel_finite_output_alphabet;;
            -> nrel_output_functions;;
            -> nrel_transition_functions;;
        *);;
	-> rrel_key_sc_element: concept_state_machine;;
	<= nrel_sc_text_translation: ...
	(*
		-> rrel_example: [Конечные автоматы обычно используются для организации
                    и представления потока выполнения чего-либо. Это особенно полезно
                    при реализации ИИ в тех же играх.] (*<- lang_ru;;*);;
	*);;
*);;

concept_math_abstraction => nrel_inclusion: concept_state_machine;;


concept_state_machine -> rrel_example: ...
(*
    => nrel_transition_functions: ... (*<- concept_function;;*);;
    => nrel_output_functions: ... (*<- concept_function;;*);;
    => nrel_finite_output_alphabet: A (*<= nrel_inclusion: concept_signal;;*);;
    => nrel_finite_input_alphabet: B (*<= nrel_inclusion: concept_signal;;*);;
*);;




nrel_alphabet
=> nrel_main_idtf: [alphabet*] (*<- lang_en;;*);
=> nrel_main_idtf: [алфавит*] (*<- lang_ru;;*);
=> nrel_idtf: [set of input characters*] (*<- lang_en;;*);
=> nrel_idtf: [множество входных символов*] (*<- lang_ru;;*);;


definition -> ...
(*
	=> nrel_using_constants: ...
	(*
		<- sc_node_not_binary_tuple;;
		-> rrel_element;;
	*);;
	-> rrel_key_sc_element: nrel_alphabet;;
	<= nrel_sc_text_translation: ...
	(*
		-> rrel_example: [Алфавит* - это конечный набор различных
                 символов (множество символов).] (*<-lang_ru;;*);;
	*);;
	=> nrel_idtf: [Опр. Алфавит.] (*<- lang_ru;;*);;
*);;


statement -> ...
(*
	=> nrel_using_constants: ...
	(*
		<- sc_node_not_binary_tuple;;
		-> rrel_element;;
	*);;
	
	-> rrel_key_sc_element: nrel_alphabet;;
	=> nrel_idtf: [Утв.1 Об алфавите.] (*<- lang_ru;;*);;
	<= nrel_sc_text_translation: ...
	(*
		-> rrel_example: [Чаще всего алфавит рассматривается как непустое конечное
         множество. Например, алфавит ￼{.,-} лежит в основе азбуки Морзе, алфавит {0,1}
         ￼ — общепринятый набор символов для представления информации в компьютерах.]
          (*<- lang_ru;;*);;
	*);;
*);;


concept_number -> 2
(*
	<= nrel_measurement: ...
	(*
		<- sc_node_not_relation;;
		-> nrel_alphabet;;
		<- arity;;
	*);;
*);;


nrel_alphabet
=> nrel_first_domain: concept_alphabet;
=> nrel_second_domain: concept_state_machine;
=> nrel_definitional_domain: ...
(*
    <= nrel_combination: 
    {
        concept_alphabet;
        concept_state_machine
    };;
*);;



relation
=> nrel_inclusion:
oriented_relation;
binary_relation;;

binary_relation
=> nrel_inclusion:
antireflexive_relation;
antitransitive_relation;
antisymetric_relation;;

oriented_relation -> nrel_alphabet;;
antireflexive_relation -> nrel_alphabet;;
antitransitive_relation -> nrel_alphabet;;
antisymmetric_relation -> nrel_alphabet;;


concept_state_machine -> rrel_example: ...
(*
    => nrel_alphabet: ...
    (*
        <- rrel_example: concept_alphabet;;
    *);;
*);;


sc_node_not_relation
-> concept_math_abstraction;
-> concept_function;
-> concept_signal;
-> arity;
-> concept_number;
-> concept_alphabet;
-> concept_state_machine;;

sc_node_norole_relation
-> nrel_finite_set_of_statements;
-> nrel_output_functions;
-> nrel_transition_functions;
-> nrel_finite_output_alphabet;
-> nrel_finite_input_alphabet;
-> nrel_alphabet;
-> nrel_measurement;;

sc_node_role_relation
-> rrel_element;;
